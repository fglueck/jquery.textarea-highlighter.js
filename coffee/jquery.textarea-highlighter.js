// Generated by CoffeeScript 1.6.3
/*
    jquery.textareaHighlighter.js 0.1.4
    jQuery plugin for highlighting text in textarea.

    alexandre.kirillov@gmail.com
    MIT license. http://opensource.org/licenses/MIT
*/


(function() {
  (function($, window, document) {
    "use strict";
    var Plugin, browser, defaults, pluginName, _escapeRegExp;
    pluginName = "textareaHighlighter";
    defaults = {
      matches: [],
      maxlength: -1,
      maxlengthWarning: '',
      maxlengthElement: null,
      debug: false
    };
    Plugin = (function() {
      function Plugin(element, options) {
        this.element = element;
        this.$element = $(this.element);
        this.settings = $.extend({}, defaults, this.$element.data(), options);
        this._defaults = defaults;
        this._name = pluginName;
        this.style = {
          backgroundColor: this.$element.css('background-color'),
          paddingTop: parseInt(this.$element.css('padding-top'), 10),
          paddingRight: parseInt(this.$element.css('padding-right'), 10),
          paddingBottom: parseInt(this.$element.css('padding-bottom'), 10),
          paddingLeft: parseInt(this.$element.css('padding-left'), 10),
          borderTop: parseInt(this.$element.css('border-top-width'), 10),
          borderRight: parseInt(this.$element.css('border-right-width'), 10),
          borderBottom: parseInt(this.$element.css('border-bottom-width'), 10),
          borderLeft: parseInt(this.$element.css('border-left-width'), 10),
          lineHeight: this.$element.css('line-height')
        };
        this.widthExtra = this.style.paddingLeft + this.style.paddingRight + this.style.borderLeft + this.style.borderRight;
        this.style.paddingTop += this.style.borderTop;
        this.style.paddingLeft += this.style.borderLeft;
        if (browser.firefox) {
          this.widthExtra += 2;
          this.style.paddingLeft += 1;
        }
        if (browser.iphone) {
          this.style.paddingRight += 3;
          this.style.paddingLeft += 3;
          this.widthExtra += 6;
        }
        this.init();
      }

      Plugin.prototype.init = function() {
        var $backgroundDiv, $this, $wrapDiv, settings, style, _this;
        _this = this;
        $this = this.$element;
        style = this.style;
        settings = this.settings;
        $wrapDiv = $(document.createElement('div')).addClass('textarea-wrap');
        $backgroundDiv = $(document.createElement('div'));
        $wrapDiv.css({
          'position': 'relative',
          'word-wrap': 'break-word',
          'word-break': 'break-all',
          'margin': 0,
          'padding-right': style.paddingLeft + style.paddingRight + style.borderLeft + style.borderRight + 'px'
        });
        $backgroundDiv.addClass('background-div').css({
          'height': 0,
          'width': 0,
          'color': settings.debug ? '#f00' : 'transparent',
          'background-color': settings.debug ? '#fee' : style.backgroundColor,
          'line-height': style.lineHeight,
          'padding-top': style.paddingTop,
          'padding-right': style.paddingRight,
          'padding-bottom': style.paddingBottom,
          'padding-left': style.paddingLeft,
          'position': 'absolute',
          'overflow': 'auto',
          'white-space': 'pre-wrap'
        });
        $this.data('changeTimerId', -1).css({
          'color': settings.debug ? 'rgba(0,0,0,0.5)' : 'inherit',
          'position': 'relative',
          'background': 'transparent'
        }).on('scroll', function() {
          return $backgroundDiv.scrollTop($this.scrollTop());
        }).on('change keydown keyup paste', function(e) {
          var changeId;
          if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {
            return;
          }
          if ($this.data('changeTimerId') !== -1) {
            clearTimeout($this.data('changeTimerId'));
            $this.data('changeTimerId', -1);
          }
          changeId = setTimeout(function() {
            var i, j, matchText, matches, maxSize, notOverMaxText, overMaxText, spanText, textareaText, words, _i, _j, _len, _len1, _ref, _ref1;
            textareaText = $(document.createElement('div')).text($this.val()).html();
            notOverMaxText = "";
            overMaxText = "";
            if (0 < settings.maxlength) {
              if (settings.maxlength < $this.val().length) {
                matchText = $this.val().slice(settings.maxlength, settings.maxlength + $this.val().length - 1);
                overMaxText = "<span class='" + settings.maxlengthWarning + "'>" + matchText + "</span>";
              }
              if (settings.maxlengthElement !== null) {
                maxSize = settings.maxlength - $this.val().length;
                if (maxSize < 0) {
                  if (!settings.maxlengthElement.hasClass(settings.maxlengthWarning)) {
                    settings.maxlengthElement.addClass(settings.maxlengthWarning);
                  }
                } else {
                  if (settings.maxlengthElement.hasClass(settings.maxlengthWarning)) {
                    settings.maxlengthElement.removeClass(settings.maxlengthWarning);
                  }
                }
                settings.maxlengthElement.text(maxSize);
              }
              notOverMaxText = $this.val().slice(0, settings.maxlength);
            } else {
              notOverMaxText = textareaText;
            }
            _ref = settings.matches;
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              matches = _ref[i];
              _ref1 = matches.words;
              for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
                words = _ref1[j];
                if (notOverMaxText.indexOf(words) !== -1) {
                  spanText = "<span class='" + matches.className + "'>" + words + "</span>";
                  notOverMaxText = notOverMaxText.replace(new RegExp(_escapeRegExp(words), 'g'), spanText);
                }
              }
            }
            $backgroundDiv.html(notOverMaxText + overMaxText);
            return _this.resize($this, $backgroundDiv);
          });
          return $this.data('changeTimerId', changeId);
        });
        $this.wrap($wrapDiv).before($backgroundDiv);
        _this.resize($this, $backgroundDiv);
        return $this.trigger('keydown');
      };

      Plugin.prototype.resize = function($target, $bgDiv) {
        var _this;
        _this = this;
        if ($bgDiv.height() !== $target.height() || $bgDiv.width() !== $target.width()) {
          return $bgDiv.css({
            'width': $target.outerWidth() - _this.widthExtra,
            'height': $target.height()
          });
        }
      };

      return Plugin;

    })();
    $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
        }
      });
    };
    _escapeRegExp = function(str) {
      return str.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    };
    return browser = (function() {
      var chrome, firefox, iphone, msie, safari, userAgent;
      userAgent = window.navigator.userAgent;
      msie = /(msie|trident)/i.test(userAgent);
      chrome = /chrome/i.test(userAgent);
      firefox = /firefox/i.test(userAgent);
      safari = /safari/i.test(userAgent) && !chrome;
      iphone = /iphone/i.test(userAgent);
      if (msie) {
        return {
          msie: true
        };
      }
      if (chrome) {
        return {
          chrome: true
        };
      }
      if (firefox) {
        return {
          firefox: true
        };
      }
      if (iphone) {
        return {
          iphone: true
        };
      }
      if (safari) {
        return {
          safari: true
        };
      }
      return {
        msie: false,
        chrome: false,
        firefox: false,
        safari: false,
        iphone: false
      };
    })();
  })(jQuery, window, document);

}).call(this);
